---
title: "Combined use of eDNA metabarcoding and visual surveys to monitor rocky intertidal biodiversity"
format: html
embed-resources: true
editor: visual
author: Simons D-L, Hipperson H, Webb TJ, Spencer M, Mieszkowska N
chunk_output_type: inline
toc: true
message: false
warning: false
---

## Introduction

This pipeline replicates all analyses in Simons *et al* (2025) "Combined use of eDNA metabarcoding and visual surveys to monitor rocky intertidal biodiversity".

## Load packages

```{r}
#| label: load-packages
#| echo: true
#| results: false

packages <- c("devtools",
              "microbiome",
              "tidyverse",
              "vegan",
              "phyloseq",
              "eulerr",
              "cowplot",
              "ggVennDiagram",
              'lme4',
              "car",
              "emmeans",
              "ggpattern")

new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

invisible(lapply(packages, library, character.only = TRUE))
```

## Importing data and tidying

Let's load our phyloseq object and long data, which have already been tidied, decontaminated, filtered for target taxa, and checked for quality control through [this pipeline](https://github.com/dinaleighsimons/intertidal-eDNA-formatting-and-quality-control).

```{r}

#| label: load-data

visual <- read.csv("Input_Data/rocky_visual_data.csv")
eDNA <- read.csv("Input_Data/rocky_eDNA_long.csv", row.names = 1)

load("Input_Data/phylo_MarClim.RData")
load("Input_Data/phylo_rocky_eDNA.RData")
```

Let's first explore our two `phyloseq` objects.

```{r}

#| label: explore-data

phylo_MarClim
phylo_rocky_eDNA
```

The eDNA data contains sites which visual surveys weren't conducted at. Let's remove them.

```{r}

#| label: remove-sites-no-visual

# long
sites_no_visual <- c("Borwick, Yesnaby", "Martin's Haven", "Skomer Island")
eDNA <- subset(eDNA, !verbatimLocality %in% sites_no_visual)

# phylo
phylo_rocky_eDNA <- subset_samples(phylo_rocky_eDNA,
                                        !verbatimLocality %in% sites_no_visual)
phylo_rocky_eDNA
```

We need to fix some names so that they match in both data sets.

```{r}

#| label: fix-names

# fix unmatched names in long eDNA
eDNA$valid_name[eDNA$valid_name == "Mytilus"] <- "Mytilus spp"
eDNA$valid_name[eDNA$valid_name == "Mytilus edulis"] <- "Mytilus spp"
eDNA$valid_name[eDNA$valid_name == "Codium"] <- "Codium spp"
eDNA$valid_name[eDNA$valid_name == "Steromphala umbilicaris"] <- "Steromphala umbilicalis"

# fix unmatched names in long visual
visual$valid_name[visual$valid_name == "Mytilus"] <- "Mytilus spp"
visual$valid_name[visual$valid_name == "Codium"] <- "Codium spp"
```

### Combining data sets (long)

We are going to combined the eDNA and visual data into the same data set. Let's start with the long format first. We will do this at three different levels.

First, let's match the capitalization of the names.

```{r}

#| label: tidying-capitalisation

#correct capitalisation in visual
visual$sciname <- sapply(strsplit(visual$sciname, " "),
                         #split taxa into two
                         function(x)
                           paste(toupper(substr(x[1], 1, 1)) %>% #converts genus to upper
                                   paste0(tolower(
                                     substr(x[1], 2, nchar(x[1]))
                                   )), tolower(paste(x[-1], collapse = " "))))
```

Let's filter the eDNA data using the visual survey species list.

```{r}

#| label: filter-eDNA-data-long

# make all factors
visual$valid_name <- as.factor(visual$valid_name)
eDNA$valid_name <- as.factor(eDNA$valid_name)

# long - match to species, genus, family
visual_species <- unique(visual$valid_name)
eDNA_species <- subset(eDNA, valid_name %in% visual_species)
dim(eDNA_species)

visual_genera <- unique(visual$genus)
eDNA_genus <- subset(eDNA, genus %in% visual_genera)
dim(eDNA_genus)

visual_family <- unique(visual$family)
eDNA_family <- subset(eDNA, family %in% visual_family)
dim(eDNA_family)
```

#### Species-level

```{r}

#| label: combine-datasets-species-long

# visual formatting
visual_subset <- visual %>% dplyr::select(c(valid_name,localityID, Count, country, genus, verbatimLocality, phylum, ))
visual_subset$method <- "Visual"
colnames(visual_subset) <- c("taxa", "localityID", "count", "region", "genus", "site", "phylum", "method")
visual_subset <- unique(visual_subset)

visual_subset <- visual_subset %>%
  mutate(pa = ifelse(count > 0, 1, 0),
         num_samples = NA,
         num_samples_found = NA,
         prop_samples_found = NA,
         primer = NA)

# eDNA formatting
# calculate number of samples which detected species per site
eDNA_species <- eDNA_species %>%
  mutate(pa = ifelse(reads > 0, 1, 0))

# Convert multiple columns to factor efficiently
eDNA_species <- eDNA_species %>%
  mutate(
    localityID = factor(localityID),
    fieldID = factor(fieldID),
    sampleType = factor(sampleType),
    taxa = factor(valid_name),
    primer = factor(primer)
  )

# calculate proportions for plots
eDNA_site_level <- eDNA_species %>%
    dplyr::group_by(localityID, valid_name, primer) %>%  # Group by site and taxa
    dplyr::summarise(
        num_samples = n_distinct(fieldID),
        num_samples_found = sum(pa > 0, na.rm = TRUE),
        prop_samples_found = sum(pa > 0, na.rm = TRUE)/n_distinct(fieldID)
    ) %>%
    ungroup()

eDNA_site_level  <- unique(eDNA_site_level)
colnames(eDNA_site_level) <- c("localityID", "taxa", "primer", "num_samples", "num_samples_found", "prop_samples_found")

eDNA_subset <- eDNA_species %>% dplyr::select(c(valid_name, localityID, reads, country, genus, verbatimLocality, primer, pa, phylum)) %>% 
  unique()
colnames(eDNA_subset) <- c("taxa", "localityID", "count", "region", "genus", "site","primer", "pa", "phylum")

eDNA_subset_site <- eDNA_subset %>% 
  dplyr::group_by(localityID, taxa, primer) %>% 
  dplyr::summarise(
    count = sum(count))

eDNA_subset_site$method <- "eDNA"

eDNA_join <- left_join(eDNA_subset_site,
                       eDNA_site_level,
                       by = c("taxa", "localityID", "primer"))

eDNA_subset_meta <- eDNA_subset %>% dplyr::select(c(localityID, region, genus, taxa, site, phylum))%>% 
  unique()

eDNA_join_meta <- left_join(eDNA_join,
                       eDNA_subset_meta,
                       by = c("taxa", "localityID"))

eDNA_join_meta <- eDNA_join_meta %>%
  mutate(pa = ifelse(count > 0, 1, 0))

eDNA_join_final <- eDNA_join_meta %>%  select(c(taxa, localityID, count, region, genus, site, phylum, method, pa, num_samples, num_samples_found, prop_samples_found, primer))

# check its worked ok
any(eDNA_join_final$num_samples_found > 0 & eDNA_join_final$count == 0) #should be false

# combine
colnames(visual_subset) == colnames(eDNA_join_final)
combined_data<- rbind(visual_subset, eDNA_join_final)
combined_data$taxa <- trimws(combined_data$taxa)
combined_data <- unique(combined_data)
combined_data$taxa <- gsub("Halichondria \\(Halichondria\\) panicea", "Halichondria panicea", combined_data$taxa) # fix rogue name

# save
write.csv(combined_data, "Processed_data/combined_methods_long_data.csv")
```

#### Genus-level

```{r}

#| label: combine-datasets-genus-long

# visual formatting
visual_subset_genus <- visual %>% dplyr::select(c(localityID, Count, country, genus, verbatimLocality, phylum, ))
visual_subset_genus$method <- "Visual"
colnames(visual_subset_genus) <- c("localityID", "count", "region", "genus", "site", "phylum", "method")
visual_subset_genus <- unique(visual_subset_genus)

visual_subset_genus <- visual_subset_genus %>%
  mutate(pa = ifelse(count > 0, 1, 0),
         num_samples = NA,
         num_samples_found = NA,
         prop_samples_found = NA,
         primer = NA)

# eDNA formatting
# calculate number of samples which detected species per site
eDNA_genus <- eDNA_genus %>%
  mutate(pa = ifelse(reads > 0, 1, 0))

# Convert multiple columns to factor efficiently
eDNA_genus <- eDNA_genus %>%
  mutate(
    localityID = factor(localityID),
    fieldID = factor(fieldID),
    sampleType = factor(sampleType),
    genus = factor(genus),
    primer = factor(primer)
  )

eDNA_site_level_genus <- eDNA_genus %>%
    dplyr::group_by(localityID, genus, primer) %>%  # Group by site and taxa
    dplyr::summarise(
        num_samples = n_distinct(fieldID),
        num_samples_found = sum(pa > 0, na.rm = TRUE),
        prop_samples_found = sum(pa > 0, na.rm = TRUE)/n_distinct(fieldID)
    ) %>%
    ungroup()

eDNA_site_level_genus  <- unique(eDNA_site_level_genus)

eDNA_subset_genus <- eDNA_genus %>% dplyr::select(c(localityID, reads, country, genus, verbatimLocality, primer, pa, phylum)) %>% 
  unique()
colnames(eDNA_subset_genus) <- c("localityID", "count", "region", "genus", "site","primer", "pa", "phylum")

eDNA_subset_site_genus <- eDNA_subset_genus %>% 
  dplyr::group_by(localityID, genus, primer) %>% 
  dplyr::summarise(
    count = sum(count))

eDNA_subset_site_genus$method <- "eDNA"

eDNA_join_genus <- left_join(eDNA_subset_site_genus,
                       eDNA_site_level_genus,
                       by = c("genus", "localityID", "primer"))

eDNA_subset_meta_genus <- eDNA_subset_genus %>% dplyr::select(c(localityID, region, genus, site, phylum))%>% 
  unique()

eDNA_join_meta_genus <- left_join(eDNA_join_genus,
                       eDNA_subset_meta_genus,
                       by = c("genus", "localityID"))

eDNA_join_meta_genus <- eDNA_join_meta_genus %>%
  mutate(pa = ifelse(count > 0, 1, 0))

eDNA_join_final_genus <- eDNA_join_meta_genus %>%  select(c(localityID, count, region, genus, site, phylum, method, pa, num_samples, num_samples_found, prop_samples_found, primer))

# check its worked ok
any(eDNA_join_final_genus$num_samples_found > 0 & eDNA_join_final_genus$count == 0) #should be false

# combine
colnames(visual_subset_genus) == colnames(eDNA_join_final_genus)
combined_data_genus<- rbind(visual_subset_genus, eDNA_join_final_genus)
combined_data_genus$genus <- trimws(combined_data_genus$genus)
combined_data_genus <- unique(combined_data_genus)
```

#### Family-level

```{r}

#| label: combine-datasets-family-long

# visual formatting
visual_subset_family <- visual %>% dplyr::select(c(localityID, Count, country, family, verbatimLocality, phylum, ))
visual_subset_family$method <- "Visual"
colnames(visual_subset_family) <- c("localityID", "count", "region", "family", "site", "phylum", "method")
visual_subset_family <- unique(visual_subset_family)

visual_subset_family <- visual_subset_family %>%
  mutate(pa = ifelse(count > 0, 1, 0),
         num_samples = NA,
         num_samples_found = NA,
         prop_samples_found = NA,
         primer = NA)

# eDNA formatting
# calculate number of samples which detected species per site
eDNA_family <- eDNA_family %>%
  mutate(pa = ifelse(reads > 0, 1, 0))

# Convert multiple columns to factor efficiently
eDNA_family <- eDNA_family %>%
  mutate(
    localityID = factor(localityID),
    fieldID = factor(fieldID),
    sampleType = factor(sampleType),
    family = factor(family),
    primer = factor(primer)
  )

eDNA_site_level_family <- eDNA_family %>%
    dplyr::group_by(localityID, family, primer) %>%  # Group by site and taxa
    dplyr::summarise(
        num_samples = n_distinct(fieldID),
        num_samples_found = sum(pa > 0, na.rm = TRUE),
        prop_samples_found = sum(pa > 0, na.rm = TRUE)/n_distinct(fieldID)
    ) %>%
    ungroup()

eDNA_site_level_family  <- unique(eDNA_site_level_family)

eDNA_subset_family <- eDNA_family %>% dplyr::select(c(localityID, reads, country, family, verbatimLocality, primer, pa, phylum)) %>% 
  unique()
colnames(eDNA_subset_family) <- c("localityID", "count", "region", "family", "site","primer", "pa", "phylum")

eDNA_subset_site_family <- eDNA_subset_family %>% 
  dplyr::group_by(localityID, family, primer) %>% 
  dplyr::summarise(
    count = sum(count))

eDNA_subset_site_family$method <- "eDNA"

eDNA_join_family <- left_join(eDNA_subset_site_family,
                       eDNA_site_level_family,
                       by = c("family", "localityID", "primer"))

eDNA_subset_meta_family <- eDNA_subset_family %>% dplyr::select(c(localityID, region, family, site, phylum))%>% 
  unique()

eDNA_join_meta_family <- left_join(eDNA_join_family,
                       eDNA_subset_meta_family,
                       by = c("family", "localityID"))

eDNA_join_meta_family <- eDNA_join_meta_family %>%
  mutate(pa = ifelse(count > 0, 1, 0))

eDNA_join_final_family <- eDNA_join_meta_family %>%  select(c(localityID, count, region, family, site, phylum, method, pa, num_samples, num_samples_found, prop_samples_found, primer))

# check its worked ok
any(eDNA_join_final_family$num_samples_found > 0 & eDNA_join_final_family$count == 0) #should be false

# combine
colnames(visual_subset_family) == colnames(eDNA_join_final_family)
combined_data_family<- rbind(visual_subset_family, eDNA_join_final_family)
combined_data_family$family <- trimws(combined_data_family$family)
combined_data_family <- unique(combined_data_family)
```

### Combining data sets (`phyloseq`)

Now let's make the combined `phyloseq` object.

#### Species-level

```{r}

# correcting captials
otu_table(phylo_MarClim) <- round(otu_table(phylo_MarClim))
otu_table(phylo_rocky_eDNA) <- round(otu_table(phylo_rocky_eDNA))

taxa_names(phylo_MarClim) <- sapply(taxa_names(phylo_MarClim), function(x) {
  paste(toupper(substring(x, 1, 1)), tolower(substring(x, 2)), sep = "")
})

# phylo - match to species, genus, family and phylum
visual_family <- unique(visual$family)
visual_phyla <- unique(visual$phylum)

# species
phylo_rocky_eDNA_marlcim_species <- subset_taxa(phylo_rocky_eDNA,
                                        valid_name %in% visual_species)
phylo_rocky_eDNA_marlcim_species

# formatting eDNA phylo
phylo_eDNA_merge <- phylo_rocky_eDNA_marlcim_species
sample_data(phylo_eDNA_merge)$Method <- "eDNA"
sample_data(phylo_eDNA_merge)$methodsite_id <- paste(sample_data(phylo_eDNA_merge)$localityID, sample_data(phylo_eDNA_merge)$Method, sep = "_")

# reduce eDNA sample data
sd <- sample_data(phylo_eDNA_merge) %>% data.frame()
sd <- sd[, names(sd) %in% c("localityID", "country", "verbatimLocality", "Method", "methodsite_id")]
sd$localityID <- as.factor(sd$localityID)
sd$country <- as.factor(sd$country)
sd$Method <- as.factor(sd$Method)
sd$verbatimLocality <- as.factor(sd$verbatimLocality)
sd$methodsite_id <- as.factor(sd$methodsite_id)
rownames(sd) <- NULL
sd <- sd[!duplicated(sd), ]
rownames(sd) <- sd$methodsite_id

# merge DNA samples by sites
ps_edna_site <- merge_samples(phylo_eDNA_merge, group = "methodsite_id")
sample_data(ps_edna_site) <- sd

# formatting visual
phylo_visual_merge <- phylo_MarClim
sample_data(phylo_visual_merge)$Method <- "Visual"
sample_data(phylo_visual_merge)$methodsite_id <- paste(sample_data(phylo_visual_merge)$localityID, sample_data(phylo_visual_merge)$Method, sep = "_")
sample_names(phylo_visual_merge) <- sample_data(phylo_visual_merge)$methodsite_id

sample_data(phylo_visual_merge)$localityID <- as.factor(sample_data(phylo_visual_merge)$localityID)
sample_data(phylo_visual_merge)$country <- as.factor(sample_data(phylo_visual_merge)$country)
sample_data(phylo_visual_merge)$Method <- as.factor(sample_data(phylo_visual_merge)$Method)
sample_data(phylo_visual_merge)$verbatimLocality <- as.factor(sample_data(phylo_visual_merge)$verbatimLocality)
sample_data(phylo_visual_merge)$methodsite_id <- as.factor(sample_data(phylo_visual_merge)$methodsite_id)

# merge together
ps_merged <- merge_phyloseq(phylo_visual_merge, ps_edna_site)
ps_merged

ps_merged_pa <- microViz::tax_transform(ps_merged, trans = "pa")
```

#### Genus-level

```{r}

# genus
phylo_rocky_eDNA_marlcim_genus <- subset_taxa(phylo_rocky_eDNA,
                                        genus %in% visual_genera)
phylo_rocky_eDNA_marlcim_genus

# formatting eDNA phylo
phylo_eDNA_merge_genus <- phylo_rocky_eDNA_marlcim_genus
sample_data(phylo_eDNA_merge_genus)$Method <- "eDNA"
sample_data(phylo_eDNA_merge_genus)$methodsite_id <- paste(sample_data(phylo_eDNA_merge_genus)$localityID, sample_data(phylo_eDNA_merge_genus)$Method, sep = "_")

# reduce eDNA sample data
sd_genus <- sample_data(phylo_eDNA_merge_genus) %>% data.frame()
sd_genus <- sd_genus[, names(sd_genus) %in% c("localityID", "country", "verbatimLocality", "Method", "methodsite_id")]
sd_genus$localityID <- as.factor(sd_genus$localityID)
sd_genus$country <- as.factor(sd_genus$country)
sd_genus$Method <- as.factor(sd_genus$Method)
sd_genus$verbatimLocality <- as.factor(sd_genus$verbatimLocality)
sd_genus$methodsite_id <- as.factor(sd_genus$methodsite_id)
rownames(sd_genus) <- NULL
sd_genus <- sd_genus[!duplicated(sd_genus), ]
rownames(sd_genus) <- sd_genus$methodsite_id

# merge DNA samples by sites
ps_edna_site_genus <- merge_samples(phylo_eDNA_merge_genus, group = "methodsite_id")
sample_data(ps_edna_site_genus) <- sd_genus

# merge together
ps_merged_genus <- merge_phyloseq(phylo_visual_merge, ps_edna_site_genus)
ps_merged_genus

ps_merged_genus_pa <- microViz::tax_transform(ps_merged_genus, trans = "pa")
```

#### Family-level

```{r}

# family
phylo_rocky_eDNA_marlcim_family <- subset_taxa(phylo_rocky_eDNA,
                                        family %in% visual_family)
phylo_rocky_eDNA_marlcim_family

# formatting eDNA phylo
phylo_eDNA_merge_family <- phylo_rocky_eDNA_marlcim_family
sample_data(phylo_eDNA_merge_family)$Method <- "eDNA"
sample_data(phylo_eDNA_merge_family)$methodsite_id <- paste(sample_data(phylo_eDNA_merge_family)$localityID, sample_data(phylo_eDNA_merge_family)$Method, sep = "_")

# reduce eDNA sample data
sd_family <- sample_data(phylo_eDNA_merge_family) %>% data.frame()
sd_family <- sd_family[, names(sd_family) %in% c("localityID", "country", "verbatimLocality", "Method", "methodsite_id")]
sd_family$localityID <- as.factor(sd_family$localityID)
sd_family$country <- as.factor(sd_family$country)
sd_family$Method <- as.factor(sd_family$Method)
sd_family$verbatimLocality <- as.factor(sd_family$verbatimLocality)
sd_family$methodsite_id <- as.factor(sd_family$methodsite_id)
rownames(sd_family) <- NULL
sd_family <- sd_family[!duplicated(sd_family), ]
rownames(sd_family) <- sd_family$methodsite_id

# merge DNA samples by sites
ps_edna_site_family <- merge_samples(phylo_eDNA_merge_family, group = "methodsite_id")
sample_data(ps_edna_site_family) <- sd_family

# merge together
ps_merged_family <- merge_phyloseq(phylo_visual_merge, ps_edna_site_family)
ps_merged_family

ps_merged_family_pa <- microViz::tax_transform(ps_merged_family, trans = "pa")
```

### Agglomerated data

```{r}

#| label: aglomerated-data

# aglom
phylo_MarClim_aglom_sp <- tax_glom(phylo_MarClim, taxrank="sciname")
phylo_MarClim_aglom_genus <- tax_glom(phylo_MarClim, taxrank="genus")
phylo_MarClim_aglom_family <- tax_glom(phylo_MarClim, taxrank="family")

phylo_rocky_eDNA_aglom_sp <- tax_glom(phylo_rocky_eDNA, taxrank="valid_name")
phylo_rocky_eDNA_aglom_genus <- tax_glom(phylo_rocky_eDNA, taxrank="genus")
phylo_rocky_eDNA_aglom_family <- tax_glom(phylo_rocky_eDNA, taxrank="family")

# filter eDNA by visual taxa
phylo_rocky_eDNA_aglom_sp <- subset_taxa(phylo_rocky_eDNA_aglom_sp,
                                        valid_name %in% visual_species)

phylo_rocky_eDNA_aglom_genus <- subset_taxa(phylo_rocky_eDNA_aglom_genus,
                                        genus  %in% visual_genera)

phylo_rocky_eDNA_aglom_family <- subset_taxa(phylo_rocky_eDNA_aglom_family,
                                        family %in% visual_family)

# merge eDNA by site
phylo_rocky_eDNA_aglom_sp <- merge_samples(phylo_rocky_eDNA_aglom_sp,
                                        "localityID")

phylo_rocky_eDNA_aglom_genus <- merge_samples(phylo_rocky_eDNA_aglom_genus,
                                        "localityID")

phylo_rocky_eDNA_aglom_family <- merge_samples(phylo_rocky_eDNA_aglom_family,
                                        "localityID")
```

## Detection concordance from paired sampling

### Bubble plots

We want to visualize our detection across sites and phyla.

First, we need to set-up some variables for the plots.

```{r}

#| label: set-variables

site_order <- c(
  "Scourie",
  "Rispond",
  "Skerray",
  "Murkle Bay",
  "Portskerra",
  #"Borwick, Yesnaby",
  "Sannick",
  "Wick", #Scotland
  "Great Orme East",
  "Little Orme",
  "Menai Bridge",
  "Porth Oer",
  "Porth Swtan",
  "Rhosneigr", #North Wales
  "Castlehead Rocks",
  "Filey Brigg",
  "Newton Point",
  "Rumbling Kern",
  "Scalby Mills", #Northumbria
  "Aberystwyth",
  "Neyland",
  "Broad Haven",
  #"Skomer Island",
  "West Angle",
  "Monkstone Point",
  "Dale Jetty",
  #"Martin's Haven", #South Wales
  "Lizard Point",
  "Looe",
  "Sennen Cove",
  "St Ives",
  "Trevone" #Cornwall
) 

country_order <- as.factor(c(
  "Scotland",
  "Northeast England",
  "North Wales",
  "South Wales",
  "Southwest England"
))

colours = c(
  "Scotland" = "darkseagreen1",
  "North Wales" = "lightpink",
  "Northeast England" = "lightyellow",
  "South Wales" = "lightblue1",
  "Southwest England" = "lavender"
)

```

#### Species-level

```{r}

#| label: plot-comp-bubble-species

# remove those note detected throughout the whole dataset
combined_data_matched <- combined_data %>%
  #filter(!genus == taxa) %>% # use this to remove codium and mytilus
  dplyr::group_by(taxa) %>% 
  filter(sum(pa) > 0) %>%    # Keep only taxa with at least one pa == 1
  ungroup()

# correct order for region
combined_data_matched$region <- factor(combined_data_matched$region, 
                                       levels = c("Scotland", 
                                                  "Northeast England",
                                                  "North Wales",
                                                  "South Wales",
                                                  "Southwest England"))

# Plot
comp_bubble_species <- ggplot(combined_data_matched, aes(x = site, y = taxa)) +
  # eDNA detections (size and fill mapped to prop_samples_found)
  geom_point(aes(
    size = if_else(method == "eDNA" & pa == 1, 3, NA_real_),
    fill = if_else(method == "eDNA" & pa == 1, prop_samples_found, NA_real_)
  ),
  alpha = 0.75,
  shape = 22) +

  # Visual detections (size applied, but using color instead of fill)
  geom_point(aes(
    size = if_else(method == "Visual" & pa == 1, 1, NA_real_),
    color = if_else(method == "Visual" & pa == 1, "red", NA_character_)
  ), shape = 21) +

  # Labels
  labs(x = "",
       y = "",
       size = "",
       fill = "Proportion of samples with positive detection") +

  # Theme settings
  theme(
    legend.key = element_blank(),
    axis.text.x = element_text(
      colour = "black",
      size = 12,
      angle = 90,
      vjust = 0.3,
      hjust = 1
    ),
    axis.text.y = element_text(
      colour = "black",
      size = 11,
      face = "italic"
    ),
    legend.text = element_text(size = 10, colour = "black"),
    legend.title = element_text(size = 10),
    panel.background = element_blank(),
    panel.border = element_rect(
      colour = "black",
      fill = NA,
      size = 1.2
    ),
    legend.position = "none",
    strip.text.y = element_text(size = 6),
    strip.text.x = element_text(size = 6)
  ) +

  # Use a continuous fill scale for eDNA values
  scale_fill_gradient(
    low = "honeydew2",
    high = "darkgreen",
    na.value = "grey"
  ) +

  # Use a manual color scale for visual detections
  scale_color_manual(values = c("red" = "red"), na.translate = FALSE) +

  # Faceting
  facet_grid(phylum ~ region, scales = "free", space = "free")

comp_bubble_species
```

#### Genus-level

```{r}

#| label: plot-comp-bubble-genus

# remove taxa without any detections across the dataset
combined_data_genus <- combined_data_genus %>%
  dplyr::group_by(genus) %>% 
  filter(sum(pa) > 0) %>%    # Keep only taxa with at least one pa == 1
  ungroup()

combined_data_genus$region <- factor(combined_data_genus$region, 
                                       levels = c("Scotland", 
                                                  "Northeast England",
                                                  "North Wales",
                                                  "South Wales",
                                                  "Southwest England"))

# Plot
comp_bubble_genus <- ggplot(combined_data_genus, aes(x = site, y = genus)) +
  # eDNA detections (size and fill mapped to prop_samples_found)
  geom_point(aes(
    size = if_else(method == "eDNA" & pa == 1, 3, NA_real_),
    fill = if_else(method == "eDNA" & pa == 1, prop_samples_found, NA_real_)
  ),
  alpha = 0.75,
  shape = 22) +

  # Visual detections (size applied, but using color instead of fill)
  geom_point(aes(
    size = if_else(method == "Visual" & pa == 1, 1, NA_real_),
    color = if_else(method == "Visual" & pa == 1, "red", NA_character_)
  ), shape = 21) +

  # Labels
  labs(x = "",
       y = "",
       size = "",
       fill = "Proportion of samples with positive detection") +

  # Theme settings
  theme(
    legend.key = element_blank(),
    axis.text.x = element_text(
      colour = "black",
      size = 12,
      angle = 90,
      vjust = 0.3,
      hjust = 1
    ),
    axis.text.y = element_text(
      colour = "black",
      size = 11,
      face = "italic"
    ),
    legend.text = element_text(size = 10, colour = "black"),
    legend.title = element_text(size = 10),
    panel.background = element_blank(),
    panel.border = element_rect(
      colour = "black",
      fill = NA,
      size = 1.2
    ),
    legend.position = "none",
    strip.text.y = element_text(size = 6),
    strip.text.x = element_text(size = 6)
  ) +

  # Use a continuous fill scale for eDNA values
  scale_fill_gradient(
    low = "lightblue1",
    high = "deepskyblue4",
    na.value = "grey"
  ) +

  # Use a manual color scale for visual detections
  scale_color_manual(values = c("red" = "red"), na.translate = FALSE) +

  # Faceting
  facet_grid(phylum ~ region, scales = "free", space = "free")

comp_bubble_genus
```

#### Family-level

```{r}

#| label: plot-comp-bubble-family

# remove taxa without any detections across the dataset
combined_data_family <- combined_data_family %>%
  dplyr::group_by(family) %>% 
  filter(sum(pa) > 0) %>%    # Keep only taxa with at least one pa == 1
  ungroup()

combined_data_family$region <- factor(combined_data_family$region, 
                                       levels = c("Scotland", 
                                                  "Northeast England",
                                                  "North Wales",
                                                  "South Wales",
                                                  "Southwest England"))

# Plot
comp_bubble_family <- ggplot(combined_data_family, aes(x = site, y = family)) +
  # eDNA detections (size and fill mapped to prop_samples_found)
  geom_point(aes(
    size = if_else(method == "eDNA" & pa == 1, 3, NA_real_),
    fill = if_else(method == "eDNA" & pa == 1, prop_samples_found, NA_real_)
  ),
  alpha = 0.75,
  shape = 22) +

  # Visual detections (size applied, but using color instead of fill)
  geom_point(aes(
    size = if_else(method == "Visual" & pa == 1, 1, NA_real_),
    color = if_else(method == "Visual" & pa == 1, "red", NA_character_)
  ), shape = 21) +

  # Labels
  labs(x = "",
       y = "",
       size = "",
       fill = "Proportion of samples with positive detection") +

  # Theme settings
  theme(
    legend.key = element_blank(),
    axis.text.x = element_text(
      colour = "black",
      size = 12,
      angle = 90,
      vjust = 0.3,
      hjust = 1
    ),
    axis.text.y = element_text(
      colour = "black",
      size = 11,
      face = "italic"
    ),
    legend.text = element_text(size = 10, colour = "black"),
    legend.title = element_text(size = 10),
    panel.background = element_blank(),
    panel.border = element_rect(
      colour = "black",
      fill = NA,
      size = 1.2
    ),
    legend.position = "none",
    strip.text.y = element_text(size = 6),
    strip.text.x = element_text(size = 6)
  ) +

  # Use a continuous fill scale for eDNA values
  scale_fill_gradient(
    low = "antiquewhite",
    high = "goldenrod4",
    na.value = "grey"
  ) +

  # Use a manual color scale for visual detections
  scale_color_manual(values = c("red" = "red"), na.translate = FALSE) +

  # Faceting
  facet_grid(phylum ~ region, scales = "free", space = "free")

comp_bubble_family
```

#### Save outputs

```{r}

#| label: save-comp-bubbles

ggsave(filename = "Figures/comparison_bubble_species.png",
       plot = comp_bubble_species, device = "png", dpi = 300, units = "mm", height = 320, width = 200)

ggsave(filename = "Figures/comparison_bubble_genus.png",
       plot = comp_bubble_genus, device = "png", dpi = 300, units = "mm", height = 300, width = 180)

ggsave(filename = "Figures/comparison_bubble_family.png",
       plot = comp_bubble_family, device = "png", dpi = 300, units = "mm", height = 260, width = 180)
```

Now let's plot them together.

```{r}

#| label: plot-comp-bubble-together

bubble_both <- cowplot::plot_grid(comp_bubble_species,comp_bubble_genus, labels = c("a", "b"), rel_widths = c(1.1,1))

ggsave(filename = "Figures/comparison_bubble.png",
       plot = bubble_both, device = "png", dpi = 300, units = "mm", height = 310, width = 380)

bubble_both
```

### Concordance table

We want to know the percentage match between the two methods across the sites. This is also done across species, genus and family.

```{r}

#| label: percentage-table-species

percentage_match <- combined_data %>%
  select(-count) %>%
  filter(pa == 1) %>%
  unique() %>%
  dplyr::group_by(taxa, region) %>%
  dplyr::summarise(
    eDNA_detected = sum(method == "eDNA"),
    # Count of eDNA detections for each taxa
    visual_detected = sum(method == "Visual"),
    # Count of visual detections for each taxa
    total_detected = eDNA_detected + visual_detected,
    # Total detections
    perc_match = ifelse(total_detected > 0, (eDNA_detected / total_detected) * 100, 0),
    # Calculate percentage match
    more_detected = case_when(
      eDNA_detected > visual_detected ~ "eDNA",
      visual_detected > eDNA_detected ~ "Visual",
      TRUE ~ "Equal"  # In case of a tie
    )
  ) %>%
  dplyr::ungroup()

percentage_match
```

```{r}

#| label: percentage-table-genus

percentage_match_genus <- combined_data_genus %>%
  select(-count) %>%
  filter(pa == 1) %>%
  unique() %>%
  dplyr::group_by(genus, region) %>%
  dplyr::summarise(
    eDNA_detected = sum(method == "eDNA"),
    # Count of eDNA detections for each taxa
    visual_detected = sum(method == "Visual"),
    # Count of visual detections for each taxa
    total_detected = eDNA_detected + visual_detected,
    # Total detections
    perc_match = ifelse(total_detected > 0, (eDNA_detected / total_detected) * 100, 0),
    # Calculate percentage match
    more_detected = case_when(
      eDNA_detected > visual_detected ~ "eDNA",
      visual_detected > eDNA_detected ~ "Visual",
      TRUE ~ "Equal"  # In case of a tie
    )
  ) %>%
  dplyr::ungroup()

print(percentage_match_genus)
```

```{r}

#| label: percentage-table-family

percentage_match_family <- combined_data_family %>%
  select(-count) %>%
  filter(pa == 1) %>%
  unique() %>%
  dplyr::group_by(family, region) %>%
  dplyr::summarise(
    eDNA_detected = sum(method == "eDNA"),
    # Count of eDNA detections for each taxa
    visual_detected = sum(method == "Visual"),
    # Count of visual detections for each taxa
    total_detected = eDNA_detected + visual_detected,
    # Total detections
    perc_match = ifelse(total_detected > 0, (eDNA_detected / total_detected) * 100, 0),
    # Calculate percentage match
    more_detected = case_when(
      eDNA_detected > visual_detected ~ "eDNA",
      visual_detected > eDNA_detected ~ "Visual",
      TRUE ~ "Equal"  # In case of a tie
    )
  ) %>%
  dplyr::ungroup()

print(percentage_match_family)
```

## Diversity

### Alpha diversity

Time to do our alpha diversity visualizations and analyses.

Let's calculate richness and Shannon diversity first.

```{r}

#| label: calculate-richness-species

# phyloseq
alpha_df_visual <- phyloseq::estimate_richness(physeq = phylo_MarClim, measure = c("Observed", "Shannon"))
head(alpha_df_visual)

alpha_df_eDNA <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_marlcim_species, measure = c("Observed", "Shannon"))
head(alpha_df_eDNA)

# long
diversity_data <- combined_data %>%
  dplyr::group_by(region, method, site) %>%  
  dplyr::summarize(
    richness = sum(pa),  
    shannon = vegan::diversity(count, index = "shannon"),
    rank = "Species"
  ) %>%
  na.omit()%>% 
  mutate(method_rank = paste(rank, method, sep = "_"))

head(diversity_data)
```

```{r}

#| label: calculate-richness-genus

alpha_df_eDNA_genus <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_marlcim_genus, measure = c("Observed", "Shannon"))
head(alpha_df_eDNA_genus)

diversity_data_genus <- combined_data_genus %>%
  dplyr::group_by(region, method, site) %>%  
  dplyr::summarize(
    richness = sum(pa),  
    shannon = vegan::diversity(count, index = "shannon"),
    rank = "Genus"
  ) %>%
  na.omit()%>% 
  mutate(method_rank = paste(rank, method, sep = "_"))

head(diversity_data_genus)
```

```{r}

#| label: calculate-richness-family

alpha_df_eDNA_family <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_marlcim_family, measure = c("Observed", "Shannon"))
head(alpha_df_eDNA_family)

diversity_data_family <- combined_data_family %>%
  dplyr::group_by(region, method, site) %>%  
  dplyr::summarize(
    richness = sum(pa),  
    shannon = vegan::diversity(count, index = "shannon"),
    rank = "Family") %>%
  na.omit() %>% 
  mutate(method_rank = paste(rank, method, sep = "_"))

head(diversity_data_family)
```

```{r}

#| label: join-diversity-overall

diversity_overall <- rbind(diversity_data, diversity_data_genus, diversity_data_family)

diversity_overall <- diversity_overall %>% 
  subset(!method_rank %in% c("Family_Visual", "Genus_Visual"))
```

```{r}

#| label: calculate-richness-aglomerated-data

visual_aglom_rich_sp <- phyloseq::estimate_richness(physeq = phylo_MarClim_aglom_sp, measure = "Observed")
visual_aglom_rich_sp$tax_rank = "Species"
visual_aglom_rich_sp$method = "Visual"
visual_aglom_rich_sp <- rownames_to_column(visual_aglom_rich_sp, var = "site")

visual_aglom_rich_genus <- phyloseq::estimate_richness(physeq = phylo_MarClim_aglom_genus, measure = "Observed")
visual_aglom_rich_genus$tax_rank = "Genus"
visual_aglom_rich_genus$method = "Visual"
visual_aglom_rich_genus <- rownames_to_column(visual_aglom_rich_genus, var = "site")

visual_aglom_rich_family <- phyloseq::estimate_richness(physeq = phylo_MarClim_aglom_family, measure = "Observed")
visual_aglom_rich_family$tax_rank = "Family"
visual_aglom_rich_family$method = "Visual"
visual_aglom_rich_family <- rownames_to_column(visual_aglom_rich_family, var = "site")

eDNA_aglom_rich_sp <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_aglom_sp, measure = "Observed")
eDNA_aglom_rich_sp$tax_rank = "Species"
eDNA_aglom_rich_sp$method = "eDNA"
eDNA_aglom_rich_sp <- rownames_to_column(eDNA_aglom_rich_sp, var = "site")

eDNA_aglom_rich_genus <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_aglom_genus, measure = "Observed")
eDNA_aglom_rich_genus$tax_rank = "Genus"
eDNA_aglom_rich_genus$method = "eDNA"
eDNA_aglom_rich_genus <- rownames_to_column(eDNA_aglom_rich_genus, var = "site")

eDNA_aglom_rich_family <- phyloseq::estimate_richness(physeq = phylo_rocky_eDNA_aglom_family, measure = "Observed")
eDNA_aglom_rich_family$tax_rank = "Family"
eDNA_aglom_rich_family$method = "eDNA"
eDNA_aglom_rich_family <- rownames_to_column(eDNA_aglom_rich_family, var = "site")

# format to join together
diversity_agglom <- rbind(visual_aglom_rich_sp, visual_aglom_rich_genus, visual_aglom_rich_family, eDNA_aglom_rich_sp, eDNA_aglom_rich_genus, eDNA_aglom_rich_family)

# add region back in
metadata <- sample_data(phylo_MarClim_aglom_sp)
colnames(metadata)[1] <- "site"
diversity_agglom <- left_join(diversity_agglom, metadata)
```

We are going to make two different alpha plots. The first, an overall comparison of richness at different taxa levels for items in the target list. The second, a comparsison of how well species were detected at different levels.

#### Boxplots

Overall plots

```{r}

#| label: plot-diversity-overall-box

rank_order <- c("Species_Visual", "Species_eDNA", "Genus_eDNA","Family_eDNA")

richness_comp_overall <- ggplot(diversity_overall,
                                aes(x = method_rank, y = richness, fill = method_rank)) +
  geom_boxplot() +
  scale_fill_manual(values = c(
    "Family_eDNA" = "deepskyblue2",
    "Genus_eDNA" = "deepskyblue3",
    "Species_eDNA" = "deepskyblue4",
    "Species_Visual" = "darkseagreen"
  )) + 
  scale_x_discrete(labels = c(
    "Family_eDNA" = "eDNA (Family)",
    "Genus_eDNA" = "eDNA (Genus)",
    "Species_eDNA" = "eDNA (Species)",
    "Species_Visual" = "Visual (Species)"
  ), limits = rank_order) +
  geom_jitter(
    color = "black",
    size = 0.9,
    alpha = 0.9,
    width = 0.1,
    height = 0.1
  ) +
  labs(x = "Method", y = "Richness") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

richness_comp_overall_region <- ggplot(diversity_overall,
                                aes(x = method_rank, y = richness, fill = method_rank)) +
  geom_boxplot() +
  scale_fill_manual(values = c(
    "Family_eDNA" = "deepskyblue2",
    "Genus_eDNA" = "deepskyblue3",
    "Species_eDNA" = "deepskyblue4",
    "Species_Visual" = "darkseagreen"
  )) + 
  scale_x_discrete(labels = c(
    "Family_eDNA" = "eDNA (Family)",
    "Genus_eDNA" = "eDNA (Genus)",
    "Species_eDNA" = "eDNA (Species)",
    "Species_Visual" = "Visual (Species)"
  ), limits = rank_order) +
  labs(x = "Method", y = "Richness") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none") +
  facet_wrap(~ region, ncol = 5)

alpha_diversity_overall_grid <- cowplot::plot_grid(richness_comp_overall, richness_comp_overall_region, labels = c("a", "b"), ncol = 1)
```

Save overall diversity.

```{r}

#| label: save-diversity-overall-box

ggsave(filename = "Figures/alpha_comp_plot_overall.png",
       plot = alpha_diversity_overall_grid, device = "png", dpi = 300, units = "mm", height = 250, width = 200)
```

Now let's make the agglomerate plot.

```{r}

#| label: plot-diversity-agglom-box

diversity_agglom$tax_rank <- factor(diversity_agglom$tax_rank, levels = c("Species", "Genus", "Family"))

richness_comp_aglom <- ggplot(diversity_agglom, aes(x = country, y = Observed, fill = method)) +
  geom_boxplot() +
  labs(x = "Region", y = "Richness", pattern = "Survey method") +
  scale_fill_manual(values = c("eDNA" = "deepskyblue4", 
                               "Visual" = "darkseagreen"))+
  theme_bw() +
  scale_x_discrete(limits = country_order) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom") +
  labs(fill = "Method")+
  facet_grid(~ tax_rank)

richness_comp_overall_aglom <- ggplot(diversity_agglom, aes(x = method, y = Observed, fill = method)) +
  geom_boxplot()+
  geom_line(aes(group=site), colour = "grey50") +
  scale_fill_manual(values = c("eDNA" = "deepskyblue4", 
                               "Visual" = "darkseagreen"))+
  geom_jitter(color="black", size=0.9, alpha=0.9, width = 0.1, height = 0.1) +
  labs(x = "Method", y = "Richness") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")+
  facet_grid(~ tax_rank)

#plot together
alpha_diversity_overall_grid_aglom <- cowplot::plot_grid(richness_comp_overall_aglom,richness_comp_aglom, labels = c("a", "b"), ncol = 1, rel_heights = c(1,1.2))
```

Save agglomerated diversity.

```{r}

#| label: save-diversity-agglom-box

ggsave(filename = "Figures/alpha_comp_plot_aglom.png",
       plot = alpha_diversity_overall_grid_aglom, device = "png", dpi = 300, units = "mm", height = 230, width = 200)
```

T-tests

```{r}

histogram(diversity_overall$richness) #  very slight right skewed
histogram(diversity_agglom$Observed) # very slight right skewed


richess_aglom_mod <- lmer(
  Observed ~ method * tax_rank +
    (1 | country:site),
  data = diversity_agglom
)

# outputs
summary(richess_aglom_mod)
anova(richess_aglom_mod)
Anova(richess_aglom_mod, type = "II")

# checks
plot(richess_aglom_mod) #good
qqnorm(resid(richess_aglom_mod))
qqline(resid(richess_aglom_mod)) #tail but not too bad

richess_overall_mod <- lmer(
  richness ~ method_rank +
    (1 | region:site),
  data = diversity_overall
)

# outputs
summary(richess_overall_mod)
anova(richess_overall_mod)
Anova(richess_overall_mod, type = "II")

# checks
plot(richess_overall_mod) #good
qqnorm(resid(richess_overall_mod))
qqline(resid(richess_overall_mod)) #tail but not too bad





t.test(Observed ~ method, data = diversity_agglom)

anova_model <- aov(Observed ~ method * country, data = diversity_agglom)
summary(anova_model)

model <- aov(Observed ~ method * tax_rank , data = diversity_agglom)
summary(model)
```

Let's visualize the alpha diversity metrics overall.

```{r}

#| label: plot-richness-species

richness_comp <- ggplot(diversity_data, aes(x = region, y = richness)) +
  geom_boxplot_pattern(
    aes(pattern = method),
    fill = "lightgreen",      # Make the bars light green
    color = "black",          # Boxplot border color
    pattern_density = 0.1,    # Adjust density of the pattern
    pattern_spacing = 0.02,   # Adjust spacing between lines
    pattern_fill = "black",   # Color of the pattern
    pattern_angle = 45,       # Diagonal lines
    pattern_alpha = 0.6       # Transparency of the pattern
  ) +
  labs(x = "Region", y = "Richness", pattern = "Survey method") +
  scale_pattern_manual(values = c("none", "stripe")) +  # Different patterns for methods
  theme_classic() +
  scale_x_discrete(limits = country_order) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r}

#| label: plot-richness-genus

richness_comp_genus <- ggplot(diversity_data_genus, aes(x = region, y = richness)) +
  geom_boxplot_pattern(
    aes(pattern = method),
    fill = "lightblue",
    pattern_density = 0.1,   # Adjust density of the pattern
    pattern_spacing = 0.02,  # Adjust spacing between lines
    pattern_fill = "black",  # Color of the pattern
    pattern_angle = 45,      # Diagonal lines
    pattern_alpha = 0.6      # Transparency of the pattern
  ) +
  labs(x = "Region", y = "Richness", pattern = "Survey method") +
  #scale_fill_manual(values = colours) +  # Adjust region colors
  scale_pattern_manual(values = c("none", "stripe")) +  # Different patterns for methods
  theme_classic() +
  scale_x_discrete(limits = country_order) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r}

#| label: plot-richness-family

# colour by the taxonomic level, shade by method
richness_comp_family <- ggplot(diversity_data_family, aes(x = region, y = richness)) +
  geom_boxplot_pattern(
    aes(pattern = method),
    fill = "gold2",
    pattern_density = 0.1,   # Adjust density of the pattern
    pattern_spacing = 0.02,  # Adjust spacing between lines
    pattern_fill = "black",  # Color of the pattern
    pattern_angle = 45,      # Diagonal lines
    pattern_alpha = 0.6      # Transparency of the pattern
  ) +
  labs(x = "Region", y = "Richness", pattern = "Survey method") +
  #scale_fill_manual(values = colours) +  # Adjust region colors
  scale_pattern_manual(values = c("none", "stripe")) +  # Different patterns for methods
  theme_classic() +
  scale_x_discrete(limits = country_order) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

### Beta diversity

#### Composition plots

```{r}

#| label: 

# Compute relative abundance
df_rel <- combined_data %>%
  group_by(region, method, phylum) %>%
  summarise(total_count = sum(count), .groups = "drop") %>%
  group_by(region, method) %>%
  mutate(rel_abundance = total_count / sum(total_count))

# Stacked bar plot
species_stacked <- ggplot(df_rel, aes(x = method, y = rel_abundance, fill = phylum)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~region, ncol = 5) +
  labs(x = "Method", y = "Relative Abundance", fill = "Phylum") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r}

# Compute relative abundance
df_rel <- combined_data_genus %>%
  group_by(region, method, phylum) %>%
  summarise(total_count = sum(count), .groups = "drop") %>%
  group_by(region, method) %>%
  mutate(rel_abundance = total_count / sum(total_count))

# Stacked bar plot
genus_stacked <- ggplot(df_rel, aes(x = method, y = rel_abundance, fill = phylum)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~region, ncol = 5) +
  labs(x = "Method", y = "Relative Abundance", fill = "Phylum") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

```{r}

# Compute relative abundance
df_rel <- combined_data_family %>%
  group_by(region, method, phylum) %>%
  summarise(total_count = sum(count), .groups = "drop") %>%
  group_by(region, method) %>%
  mutate(rel_abundance = total_count / sum(total_count))

# Stacked bar plot
family_stacked <- ggplot(df_rel, aes(x = method, y = rel_abundance, fill = phylum)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~region, ncol = 5) +
  labs(x = "Method", y = "Relative Abundance", fill = "Phylum") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right")
```

```{r}

#| label: plot-composition-together

stacked_comp_plot <- cowplot::plot_grid(species_stacked, genus_stacked,family_stacked, labels = c("d", "e", "f"), ncol = 3, rel_widths = c(1,1,1.4))

ggsave(filename = "Figures/all_stacked_composition.png",
       plot = stacked_comp_plot, device = "png", dpi = 300, units = "mm", height = 200, width = 400)

stacked_comp_plot
```

#### NMDS plots

Species-level

```{r}

#| label: ord-jaccard-method-species

ord.nmds.jaccard <- ordinate(ps_merged_pa, method = "NMDS", distance =
                                   "jaccard")

stress_value_jaccard <- ord.nmds.jaccard$stress
```

```{r}

#| label: nmds-jaccard-method-species

NMDS_method_jaccard <- plot_ordination(ps_merged_pa, ord.nmds.jaccard, color="Method")+
  theme_classic()+ 
  annotate("text", x = Inf, y = Inf, label = paste("Stress =", round(stress_value_jaccard, 3)), 
           size = 4, hjust = 1.1, vjust = 1.5)+
  stat_ellipse(aes(group = Method), type = "t", level = 0.95, linetype = 1, size = 0.5)+
  labs(color = "Method") +
  theme(legend.position = "none") +
  xlim(-1,1)+
  scale_color_manual(values = c("eDNA" = "deepskyblue4", "Visual" = "darkseagreen"))+
  guides(colour = guide_legend(nrow = 2, byrow = TRUE)) 

NMDS_method_jaccard
```

Genus-level

```{r}

#| label: ord-jaccard-method-genus

ord.nmds.jaccard.genus <- ordinate(ps_merged_genus_pa, method = "NMDS", distance =
                                   "jaccard")

stress_value_jaccard_genus <- ord.nmds.jaccard.genus$stress
```

```{r}

#| label: nmds-jaccard-method-genus

NMDS_method_jaccard_genus <- plot_ordination(ps_merged_genus_pa, ord.nmds.jaccard.genus, color="Method")+
  theme_classic()+ 
  annotate("text", x = Inf, y = Inf, label = paste("Stress =", round(stress_value_jaccard_genus, 3)), 
           size = 4, hjust = 1.1, vjust = 1.5)+
  stat_ellipse(aes(group = Method), type = "t", level = 0.95, linetype = 1, size = 0.5)+
  labs(color = "Method") +
  scale_color_manual(values = c("eDNA" = "deepskyblue4", "Visual" = "darkseagreen"))+
  theme(legend.position = "none") +
  xlim(-1,1)+
  guides(colour = guide_legend(nrow = 2, byrow = TRUE)) 

NMDS_method_jaccard_genus
```

Family-level

```{r}

#| label: ord-jaccard-method-family

ord.nmds.jaccard.family <- ordinate(ps_merged_family_pa, method = "NMDS", distance =
                                   "jaccard")

stress_value_jaccard_family <- ord.nmds.jaccard.family$stress
```

```{r}

NMDS_method_jaccard_family <- plot_ordination(ps_merged_family_pa, ord.nmds.jaccard.family, color="Method")+
  theme_classic()+ 
  annotate("text", x = Inf, y = Inf, label = paste("Stress =", round(stress_value_jaccard_family, 3)), 
           size = 4, hjust = 1.1, vjust = 1.5)+
  stat_ellipse(aes(group = Method), type = "t", level = 0.95, linetype = 1, size = 0.5)+
  labs(color = "Method") +
  theme(legend.position = "right") +
  scale_color_manual(values = c("eDNA" = "deepskyblue4", "Visual" = "darkseagreen"))+
  guides(colour = guide_legend(nrow = 2, byrow = TRUE)) 

NMDS_method_jaccard_family
```

```{r}

# plot beta together

beta_all <- cowplot::plot_grid(species_stacked, genus_stacked,family_stacked,NMDS_method_jaccard, NMDS_method_jaccard_genus,NMDS_method_jaccard_family, labels = c("a", "b", "c", "d", "e", "f"), ncol = 3, rel_widths = c(1,1,1.4))

ggsave(filename = "Figures/beta_all.png",
       plot = beta_all, device = "png", dpi = 300, units = "mm", height = 300, width = 450)

beta_all
```

## Species with shifting ranges

```{r}

#| label: define-marclim-genera

changing_taxa_list <- c("Semibalanus balanoides",
                        "Alaria esculenta",
                        "Phorcus lineatus",
                        "Steromphala umbilicalis",
                        "Chthamalus montagui",
                        "Perforatus perforatus", 
                        "Patella depressa", 
                        "Bifurcaria bifurcata")
```

```{r}

#| label: marclim-taxa-regions-figures

for (i in changing_taxa_list) {
  tryCatch({
    # Subset the taxa for the current genus
    taxa <- subset_taxa(phylo_rocky_eDNA, scientificname == i)
    
    # Check if there are any taxa after subsetting
    if (ntaxa(taxa) == 0) {
      stop(paste("No species found:", i))  # Manually trigger an error if no taxa are found
    }
    
    # Generate the bar plot for the current genus
    p <- plot_bar(taxa, "country", fill = "scientificname") + 
      labs(y = "Read count", x = "Shore Height") +
      theme_classic()+
      theme(legend.position = "none")
    p
    
    # Save the plot to the folder
    plot_file_path <- paste0("Figures/Changing_Species_Regions/", i, "_regions.png")
    ggsave(filename = plot_file_path, plot = p, width = 11, height = 9, dpi = 300)  # Adjust size as needed
    
  }, error = function(e) {
    # Handle the error: print a message and skip to the next genus
    message(paste("Error with genus:", i, " - ", e$message))
  })
}
```

```{r}

for (i in changing_taxa_list) {
  tryCatch({
    # Subset the taxa for the current genus
    taxa <- subset_taxa(phylo_MarClim, valid_name == i)
    
    # Check if there are any taxa after subsetting
    if (ntaxa(taxa) == 0) {
      stop(paste("No species found:", i))  # Manually trigger an error if no taxa are found
    }
    
    # Generate the bar plot for the current genus
    p <- plot_bar(taxa, "country", fill = "scientificname") + 
      labs(y = "Read count", x = "Shore Height") +
      theme_classic()+
      theme(legend.position = "none")
    p
    
    # Save the plot to the folder
    plot_file_path <- paste0("Figures/Changing_Species_Regions/", i, "_regions.png")
    ggsave(filename = plot_file_path, plot = p, width = 11, height = 9, dpi = 300)  # Adjust size as needed
    
  }, error = function(e) {
    # Handle the error: print a message and skip to the next genus
    message(paste("Error with genus:", i, " - ", e$message))
  })
}
```

## Abundance estimates

```{r}

#calculate richness
method_count <- combined_data %>% select(count, method)

# Add an identifier column to ensure pairing
df <- method_count %>%
  group_by(method) %>%
  mutate(id = row_number()) %>%
  ungroup()

# Reshape data to wide format
df_wide <- df %>%
  pivot_wider(names_from = method, values_from = count) %>%
  select(-id) %>% # Remove the identifier column if not needed
  subset(eDNA >= 1 & Visual >= 1) %>% #remove absences
  as.data.frame()    # Convert to data frame


# Create scatter plot
ggplot(df_wide, aes(x = log(eDNA), y = Visual)) +
  geom_point(color = "darkgreen") +
  labs(
    x = "eDNA reads (logged)",
    y = "Visual counts"
  ) +
  theme_classic()
```

## Concluding remarks

We have now created all figures and reproduced all analyses presented in the manuscript.
